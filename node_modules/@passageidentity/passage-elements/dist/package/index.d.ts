import { Metadata, authResult, TokenStore } from '@passageidentity/passage-js';
export { TokenStore, authResult } from '@passageidentity/passage-js';

declare enum BeforeAuthCallbackType {
    Login = "login",
    Register = "register"
}
interface BeforeAuthCallbackPayload {
    authType: BeforeAuthCallbackType;
    /** Any additional metadata provided by the user. This will only be available on registration. */
    userMetadata?: Metadata;
}
type BeforeAuthCallback = (identifier: string, payload: BeforeAuthCallbackPayload) => boolean;
type OnSuccessCallback = (authResult: authResult) => void;

interface PassageElement extends HTMLElement {
    appId?: string;
    onSuccess?: OnSuccessCallback;
    beforeAuth?: BeforeAuthCallback;
    lang: string;
    defaultCountryCode?: string;
    tokenStore?: TokenStore;
    theme?: 'light' | 'dark' | 'auto';
}

interface PassageProfileElement extends HTMLElement {
    appId?: string;
    lang: string;
    defaultCountryCode?: string;
    tokenStore?: TokenStore;
    theme?: 'light' | 'dark' | 'auto';
}

export { BeforeAuthCallback, BeforeAuthCallbackPayload, BeforeAuthCallbackType, OnSuccessCallback, PassageElement, PassageProfileElement };
