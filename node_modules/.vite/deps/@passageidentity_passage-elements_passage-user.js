import {
  __commonJS,
  __publicField,
  __toESM
} from "./chunk-DC5AMYBS.js";

// node_modules/ua-parser-js/src/ua-parser.js
var require_ua_parser = __commonJS({
  "node_modules/ua-parser-js/src/ua-parser.js"(exports, module) {
    (function(window2, undefined2) {
      "use strict";
      var LIBVERSION = "1.0.38", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 500;
      var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
      var extend = function(regexes2, extensions) {
        var mergedRegexes = {};
        for (var i3 in regexes2) {
          if (extensions[i3] && extensions[i3].length % 2 === 0) {
            mergedRegexes[i3] = extensions[i3].concat(regexes2[i3]);
          } else {
            mergedRegexes[i3] = regexes2[i3];
          }
        }
        return mergedRegexes;
      }, enumerize = function(arr) {
        var enums = {};
        for (var i3 = 0; i3 < arr.length; i3++) {
          enums[arr[i3].toUpperCase()] = arr[i3];
        }
        return enums;
      }, has = function(str1, str2) {
        return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
      }, lowerize = function(str) {
        return str.toLowerCase();
      }, majorize = function(version) {
        return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined2;
      }, trim = function(str, len) {
        if (typeof str === STR_TYPE) {
          str = str.replace(/^\s\s*/, EMPTY);
          return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
        }
      };
      var rgxMapper = function(ua, arrays) {
        var i3 = 0, j2, k, p2, q2, matches, match;
        while (i3 < arrays.length && !matches) {
          var regex = arrays[i3], props = arrays[i3 + 1];
          j2 = k = 0;
          while (j2 < regex.length && !matches) {
            if (!regex[j2]) {
              break;
            }
            matches = regex[j2++].exec(ua);
            if (!!matches) {
              for (p2 = 0; p2 < props.length; p2++) {
                match = matches[++k];
                q2 = props[p2];
                if (typeof q2 === OBJ_TYPE && q2.length > 0) {
                  if (q2.length === 2) {
                    if (typeof q2[1] == FUNC_TYPE) {
                      this[q2[0]] = q2[1].call(this, match);
                    } else {
                      this[q2[0]] = q2[1];
                    }
                  } else if (q2.length === 3) {
                    if (typeof q2[1] === FUNC_TYPE && !(q2[1].exec && q2[1].test)) {
                      this[q2[0]] = match ? q2[1].call(this, match, q2[2]) : undefined2;
                    } else {
                      this[q2[0]] = match ? match.replace(q2[1], q2[2]) : undefined2;
                    }
                  } else if (q2.length === 4) {
                    this[q2[0]] = match ? q2[3].call(this, match.replace(q2[1], q2[2])) : undefined2;
                  }
                } else {
                  this[q2] = match ? match : undefined2;
                }
              }
            }
          }
          i3 += 2;
        }
      }, strMapper = function(str, map) {
        for (var i3 in map) {
          if (typeof map[i3] === OBJ_TYPE && map[i3].length > 0) {
            for (var j2 = 0; j2 < map[i3].length; j2++) {
              if (has(map[i3][j2], str)) {
                return i3 === UNKNOWN ? undefined2 : i3;
              }
            }
          } else if (has(map[i3], str)) {
            return i3 === UNKNOWN ? undefined2 : i3;
          }
        }
        return str;
      };
      var oldSafariMap = {
        "1.0": "/8",
        "1.2": "/1",
        "1.3": "/3",
        "2.0": "/412",
        "2.0.2": "/416",
        "2.0.3": "/417",
        "2.0.4": "/419",
        "?": "/"
      }, windowsVersionMap = {
        "ME": "4.90",
        "NT 3.11": "NT3.51",
        "NT 4.0": "NT4.0",
        "2000": "NT 5.0",
        "XP": ["NT 5.1", "NT 5.2"],
        "Vista": "NT 6.0",
        "7": "NT 6.1",
        "8": "NT 6.2",
        "8.1": "NT 6.3",
        "10": ["NT 6.4", "NT 10.0"],
        "RT": "ARM"
      };
      var regexes = {
        browser: [
          [
            /\b(?:crmo|crios)\/([\w\.]+)/i
            // Chrome for Android/iOS
          ],
          [VERSION, [NAME, "Chrome"]],
          [
            /edg(?:e|ios|a)?\/([\w\.]+)/i
            // Microsoft Edge
          ],
          [VERSION, [NAME, "Edge"]],
          [
            // Presto based
            /(opera mini)\/([-\w\.]+)/i,
            // Opera Mini
            /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
            // Opera Mobi/Tablet
            /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
            // Opera
          ],
          [NAME, VERSION],
          [
            /opios[\/ ]+([\w\.]+)/i
            // Opera mini on iphone >= 8.0
          ],
          [VERSION, [NAME, OPERA + " Mini"]],
          [
            /\bop(?:rg)?x\/([\w\.]+)/i
            // Opera GX
          ],
          [VERSION, [NAME, OPERA + " GX"]],
          [
            /\bopr\/([\w\.]+)/i
            // Opera Webkit
          ],
          [VERSION, [NAME, OPERA]],
          [
            // Mixed
            /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i
            // Baidu
          ],
          [VERSION, [NAME, "Baidu"]],
          [
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
            // Lunascape/Maxthon/Netfront/Jasmine/Blazer
            // Trident based
            /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,
            // Avant/IEMobile/SlimBrowser
            /(?:ms|\()(ie) ([\w\.]+)/i,
            // Internet Explorer
            // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
            /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
            // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
            /(heytap|ovi)browser\/([\d\.]+)/i,
            // Heytap/Ovi
            /(weibo)__([\d\.]+)/i
            // Weibo
          ],
          [NAME, VERSION],
          [
            /\bddg\/([\w\.]+)/i
            // DuckDuckGo
          ],
          [VERSION, [NAME, "DuckDuckGo"]],
          [
            /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
            // UCBrowser
          ],
          [VERSION, [NAME, "UC" + BROWSER]],
          [
            /microm.+\bqbcore\/([\w\.]+)/i,
            // WeChat Desktop for Windows Built-in Browser
            /\bqbcore\/([\w\.]+).+microm/i,
            /micromessenger\/([\w\.]+)/i
            // WeChat
          ],
          [VERSION, [NAME, "WeChat"]],
          [
            /konqueror\/([\w\.]+)/i
            // Konqueror
          ],
          [VERSION, [NAME, "Konqueror"]],
          [
            /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
            // IE11
          ],
          [VERSION, [NAME, "IE"]],
          [
            /ya(?:search)?browser\/([\w\.]+)/i
            // Yandex
          ],
          [VERSION, [NAME, "Yandex"]],
          [
            /slbrowser\/([\w\.]+)/i
            // Smart Lenovo Browser
          ],
          [VERSION, [NAME, "Smart Lenovo " + BROWSER]],
          [
            /(avast|avg)\/([\w\.]+)/i
            // Avast/AVG Secure Browser
          ],
          [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
          [
            /\bfocus\/([\w\.]+)/i
            // Firefox Focus
          ],
          [VERSION, [NAME, FIREFOX + " Focus"]],
          [
            /\bopt\/([\w\.]+)/i
            // Opera Touch
          ],
          [VERSION, [NAME, OPERA + " Touch"]],
          [
            /coc_coc\w+\/([\w\.]+)/i
            // Coc Coc Browser
          ],
          [VERSION, [NAME, "Coc Coc"]],
          [
            /dolfin\/([\w\.]+)/i
            // Dolphin
          ],
          [VERSION, [NAME, "Dolphin"]],
          [
            /coast\/([\w\.]+)/i
            // Opera Coast
          ],
          [VERSION, [NAME, OPERA + " Coast"]],
          [
            /miuibrowser\/([\w\.]+)/i
            // MIUI Browser
          ],
          [VERSION, [NAME, "MIUI " + BROWSER]],
          [
            /fxios\/([-\w\.]+)/i
            // Firefox for iOS
          ],
          [VERSION, [NAME, FIREFOX]],
          [
            /\bqihu|(qi?ho?o?|360)browser/i
            // 360
          ],
          [[NAME, "360 " + BROWSER]],
          [
            /(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i
          ],
          [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
          [
            // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
            /samsungbrowser\/([\w\.]+)/i
            // Samsung Internet
          ],
          [VERSION, [NAME, SAMSUNG + " Internet"]],
          [
            /(comodo_dragon)\/([\w\.]+)/i
            // Comodo Dragon
          ],
          [[NAME, /_/g, " "], VERSION],
          [
            /metasr[\/ ]?([\d\.]+)/i
            // Sogou Explorer
          ],
          [VERSION, [NAME, "Sogou Explorer"]],
          [
            /(sogou)mo\w+\/([\d\.]+)/i
            // Sogou Mobile
          ],
          [[NAME, "Sogou Mobile"], VERSION],
          [
            /(electron)\/([\w\.]+) safari/i,
            // Electron-based App
            /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
            // Tesla
            /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i
            // QQBrowser/2345 Browser
          ],
          [NAME, VERSION],
          [
            /(lbbrowser)/i,
            // LieBao Browser
            /\[(linkedin)app\]/i
            // LinkedIn App for iOS & Android
          ],
          [NAME],
          [
            // WebView
            /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
            // Facebook App for iOS & Android
          ],
          [[NAME, FACEBOOK], VERSION],
          [
            /(Klarna)\/([\w\.]+)/i,
            // Klarna Shopping Browser for iOS & Android
            /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
            // Kakao App
            /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
            // Naver InApp
            /safari (line)\/([\w\.]+)/i,
            // Line App for iOS
            /\b(line)\/([\w\.]+)\/iab/i,
            // Line App for Android
            /(alipay)client\/([\w\.]+)/i,
            // Alipay
            /(twitter)(?:and| f.+e\/([\w\.]+))/i,
            // Twitter
            /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i
            // Chromium/Instagram/Snapchat
          ],
          [NAME, VERSION],
          [
            /\bgsa\/([\w\.]+) .*safari\//i
            // Google Search Appliance on iOS
          ],
          [VERSION, [NAME, "GSA"]],
          [
            /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i
            // TikTok
          ],
          [VERSION, [NAME, "TikTok"]],
          [
            /headlesschrome(?:\/([\w\.]+)| )/i
            // Chrome Headless
          ],
          [VERSION, [NAME, CHROME + " Headless"]],
          [
            / wv\).+(chrome)\/([\w\.]+)/i
            // Chrome WebView
          ],
          [[NAME, CHROME + " WebView"], VERSION],
          [
            /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
            // Android Browser
          ],
          [VERSION, [NAME, "Android " + BROWSER]],
          [
            /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
            // Chrome/OmniWeb/Arora/Tizen/Nokia
          ],
          [NAME, VERSION],
          [
            /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
            // Mobile Safari
          ],
          [VERSION, [NAME, "Mobile Safari"]],
          [
            /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
            // Safari & Safari Mobile
          ],
          [VERSION, NAME],
          [
            /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
            // Safari < 3.0
          ],
          [NAME, [VERSION, strMapper, oldSafariMap]],
          [
            /(webkit|khtml)\/([\w\.]+)/i
          ],
          [NAME, VERSION],
          [
            // Gecko based
            /(navigator|netscape\d?)\/([-\w\.]+)/i
            // Netscape
          ],
          [[NAME, "Netscape"], VERSION],
          [
            /mobile vr; rv:([\w\.]+)\).+firefox/i
            // Firefox Reality
          ],
          [VERSION, [NAME, FIREFOX + " Reality"]],
          [
            /ekiohf.+(flow)\/([\w\.]+)/i,
            // Flow
            /(swiftfox)/i,
            // Swiftfox
            /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
            // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
            /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
            // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
            /(firefox)\/([\w\.]+)/i,
            // Other Firefox-based
            /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
            // Mozilla
            // Other
            /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
            // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
            /(links) \(([\w\.]+)/i,
            // Links
            /panasonic;(viera)/i
            // Panasonic Viera
          ],
          [NAME, VERSION],
          [
            /(cobalt)\/([\w\.]+)/i
            // Cobalt
          ],
          [NAME, [VERSION, /master.|lts./, ""]]
        ],
        cpu: [
          [
            /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
            // AMD64 (x64)
          ],
          [[ARCHITECTURE, "amd64"]],
          [
            /(ia32(?=;))/i
            // IA32 (quicktime)
          ],
          [[ARCHITECTURE, lowerize]],
          [
            /((?:i[346]|x)86)[;\)]/i
            // IA32 (x86)
          ],
          [[ARCHITECTURE, "ia32"]],
          [
            /\b(aarch64|arm(v?8e?l?|_?64))\b/i
            // ARM64
          ],
          [[ARCHITECTURE, "arm64"]],
          [
            /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
            // ARMHF
          ],
          [[ARCHITECTURE, "armhf"]],
          [
            // PocketPC mistakenly identified as PowerPC
            /windows (ce|mobile); ppc;/i
          ],
          [[ARCHITECTURE, "arm"]],
          [
            /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
            // PowerPC
          ],
          [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
          [
            /(sun4\w)[;\)]/i
            // SPARC
          ],
          [[ARCHITECTURE, "sparc"]],
          [
            /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
          ],
          [[ARCHITECTURE, lowerize]]
        ],
        device: [
          [
            //////////////////////////
            // MOBILES & TABLETS
            /////////////////////////
            // Samsung
            /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
          [
            /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
            /samsung[- ]([-\w]+)/i,
            /sec-(sgh\w+)/i
          ],
          [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
          [
            // Apple
            /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i
            // iPod/iPhone
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
          [
            /\((ipad);[-\w\),; ]+apple/i,
            // iPad
            /applecoremedia\/[\w\.]+ \((ipad)/i,
            /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
          [
            /(macintosh);/i
          ],
          [MODEL, [VENDOR, APPLE]],
          [
            // Sharp
            /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
          [
            // Huawei
            /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
          [
            /(?:huawei|honor)([-\w ]+)[;\)]/i,
            /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
          ],
          [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
          [
            // Xiaomi
            /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,
            // Xiaomi POCO
            /\b; (\w+) build\/hm\1/i,
            // Xiaomi Hongmi 'numeric' models
            /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
            // Xiaomi Hongmi
            /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
            // Xiaomi Redmi
            /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,
            // Xiaomi Redmi 'numeric' models
            /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
            // Xiaomi Mi
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
          [
            /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,
            // Redmi Pad
            /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
            // Mi Pad tablets
          ],
          [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
          [
            // OPPO
            /; (\w+) bui.+ oppo/i,
            /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
          [
            /\b(opd2\d{3}a?) bui/i
          ],
          [MODEL, [VENDOR, "OPPO"], [TYPE, TABLET]],
          [
            // Vivo
            /vivo (\w+)(?: bui|\))/i,
            /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
          ],
          [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
          [
            // Realme
            /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
          ],
          [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
          [
            // Motorola
            /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
            /\bmot(?:orola)?[- ](\w*)/i,
            /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
          [
            /\b(mz60\d|xoom[2 ]{0,2}) build\//i
          ],
          [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
          [
            // LG
            /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, TABLET]],
          [
            /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
            /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
            /\blg-?([\d\w]+) bui/i
          ],
          [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
          [
            // Lenovo
            /(ideatab[-\w ]+)/i,
            /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
          ],
          [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
          [
            // Nokia
            /(?:maemo|nokia).*(n900|lumia \d+)/i,
            /nokia[-_ ]?([-\w\.]*)/i
          ],
          [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
          [
            // Google
            /(pixel c)\b/i
            // Google Pixel C
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
          [
            /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
            // Google Pixel
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
          [
            // Sony
            /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
          ],
          [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
          [
            /sony tablet [ps]/i,
            /\b(?:sony)?sgp\w+(?: bui|\))/i
          ],
          [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
          [
            // OnePlus
            / (kb2005|in20[12]5|be20[12][59])\b/i,
            /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
          ],
          [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
          [
            // Amazon
            /(alexa)webm/i,
            /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,
            // Kindle Fire without Silk / Echo Show
            /(kf[a-z]+)( bui|\)).+silk\//i
            // Kindle Fire HD
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
          [
            /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
            // Fire Phone
          ],
          [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
          [
            // BlackBerry
            /(playbook);[-\w\),; ]+(rim)/i
            // BlackBerry PlayBook
          ],
          [MODEL, VENDOR, [TYPE, TABLET]],
          [
            /\b((?:bb[a-f]|st[hv])100-\d)/i,
            /\(bb10; (\w+)/i
            // BlackBerry 10
          ],
          [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
          [
            // Asus
            /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
          [
            / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
          ],
          [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
          [
            // HTC
            /(nexus 9)/i
            // HTC Nexus 9
          ],
          [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
          [
            /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
            // HTC
            // ZTE
            /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
            /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
            // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
          ],
          [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
          [
            // Acer
            /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
          ],
          [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
          [
            // Meizu
            /droid.+; (m[1-5] note) bui/i,
            /\bmz-([-\w]{2,})/i
          ],
          [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
          [
            // Ulefone
            /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
          ],
          [MODEL, [VENDOR, "Ulefone"], [TYPE, MOBILE]],
          [
            // MIXED
            /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
            // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
            /(hp) ([\w ]+\w)/i,
            // HP iPAQ
            /(asus)-?(\w+)/i,
            // Asus
            /(microsoft); (lumia[\w ]+)/i,
            // Microsoft Lumia
            /(lenovo)[-_ ]?([-\w]+)/i,
            // Lenovo
            /(jolla)/i,
            // Jolla
            /(oppo) ?([\w ]+) bui/i
            // OPPO
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kobo)\s(ereader|touch)/i,
            // Kobo
            /(archos) (gamepad2?)/i,
            // Archos
            /(hp).+(touchpad(?!.+tablet)|tablet)/i,
            // HP TouchPad
            /(kindle)\/([\w\.]+)/i,
            // Kindle
            /(nook)[\w ]+build\/(\w+)/i,
            // Nook
            /(dell) (strea[kpr\d ]*[\dko])/i,
            // Dell Streak
            /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
            // Le Pan Tablets
            /(trinity)[- ]*(t\d{3}) bui/i,
            // Trinity Tablets
            /(gigaset)[- ]+(q\w{1,9}) bui/i,
            // Gigaset Tablets
            /(vodafone) ([\w ]+)(?:\)| bui)/i
            // Vodafone
          ],
          [VENDOR, MODEL, [TYPE, TABLET]],
          [
            /(surface duo)/i
            // Surface Duo
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
          [
            /droid [\d\.]+; (fp\du?)(?: b|\))/i
            // Fairphone
          ],
          [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
          [
            /(u304aa)/i
            // AT&T
          ],
          [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
          [
            /\bsie-(\w*)/i
            // Siemens
          ],
          [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
          [
            /\b(rct\w+) b/i
            // RCA Tablets
          ],
          [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
          [
            /\b(venue[\d ]{2,7}) b/i
            // Dell Venue Tablets
          ],
          [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
          [
            /\b(q(?:mv|ta)\w+) b/i
            // Verizon Tablet
          ],
          [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
          [
            /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
            // Barnes & Noble Tablet
          ],
          [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
          [
            /\b(tm\d{3}\w+) b/i
          ],
          [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
          [
            /\b(k88) b/i
            // ZTE K Series Tablet
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
          [
            /\b(nx\d{3}j) b/i
            // ZTE Nubia
          ],
          [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
          [
            /\b(gen\d{3}) b.+49h/i
            // Swiss GEN Mobile
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
          [
            /\b(zur\d{3}) b/i
            // Swiss ZUR Tablet
          ],
          [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
          [
            /\b((zeki)?tb.*\b) b/i
            // Zeki Tablets
          ],
          [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
          [
            /\b([yr]\d{2}) b/i,
            /\b(dragon[- ]+touch |dt)(\w{5}) b/i
            // Dragon Touch Tablet
          ],
          [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
          [
            /\b(ns-?\w{0,9}) b/i
            // Insignia Tablets
          ],
          [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
          [
            /\b((nxa|next)-?\w{0,9}) b/i
            // NextBook Tablets
          ],
          [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
          [
            /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
            // Voice Xtreme Phones
          ],
          [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
          [
            /\b(lvtel\-)?(v1[12]) b/i
            // LvTel Phones
          ],
          [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
          [
            /\b(ph-1) /i
            // Essential PH-1
          ],
          [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
          [
            /\b(v(100md|700na|7011|917g).*\b) b/i
            // Envizen Tablets
          ],
          [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
          [
            /\b(trio[-\w\. ]+) b/i
            // MachSpeed Tablets
          ],
          [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
          [
            /\btu_(1491) b/i
            // Rotor Tablets
          ],
          [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
          [
            /(shield[\w ]+) b/i
            // Nvidia Shield Tablets
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
          [
            /(sprint) (\w+)/i
            // Sprint Phones
          ],
          [VENDOR, MODEL, [TYPE, MOBILE]],
          [
            /(kin\.[onetw]{3})/i
            // Microsoft Kin
          ],
          [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
          [
            /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
            // Zebra
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
          [
            /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
          [
            ///////////////////
            // SMARTTVS
            ///////////////////
            /smart-tv.+(samsung)/i
            // Samsung
          ],
          [VENDOR, [TYPE, SMARTTV]],
          [
            /hbbtv.+maple;(\d+)/i
          ],
          [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
          [
            /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
            // LG SmartTV
          ],
          [[VENDOR, LG], [TYPE, SMARTTV]],
          [
            /(apple) ?tv/i
            // Apple TV
          ],
          [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
          [
            /crkey/i
            // Google Chromecast
          ],
          [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
          [
            /droid.+aft(\w+)( bui|\))/i
            // Fire TV
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
          [
            /\(dtv[\);].+(aquos)/i,
            /(aquos-tv[\w ]+)\)/i
            // Sharp
          ],
          [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
          [
            /(bravia[\w ]+)( bui|\))/i
            // Sony
          ],
          [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
          [
            /(mitv-\w{5}) bui/i
            // Xiaomi
          ],
          [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
          [
            /Hbbtv.*(technisat) (.*);/i
            // TechniSAT
          ],
          [VENDOR, MODEL, [TYPE, SMARTTV]],
          [
            /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
            // Roku
            /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
            // HbbTV devices
          ],
          [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
          [
            /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
            // SmartTV from Unidentified Vendors
          ],
          [[TYPE, SMARTTV]],
          [
            ///////////////////
            // CONSOLES
            ///////////////////
            /(ouya)/i,
            // Ouya
            /(nintendo) ([wids3utch]+)/i
            // Nintendo
          ],
          [VENDOR, MODEL, [TYPE, CONSOLE]],
          [
            /droid.+; (shield) bui/i
            // Nvidia
          ],
          [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
          [
            /(playstation [345portablevi]+)/i
            // Playstation
          ],
          [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
          [
            /\b(xbox(?: one)?(?!; xbox))[\); ]/i
            // Microsoft Xbox
          ],
          [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
          [
            ///////////////////
            // WEARABLES
            ///////////////////
            /((pebble))app/i
            // Pebble
          ],
          [VENDOR, MODEL, [TYPE, WEARABLE]],
          [
            /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
            // Apple Watch
          ],
          [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
          [
            /droid.+; (glass) \d/i
            // Google Glass
          ],
          [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
          [
            /droid.+; (wt63?0{2,3})\)/i
          ],
          [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
          [
            /(quest( \d| pro)?)/i
            // Oculus Quest
          ],
          [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
          [
            ///////////////////
            // EMBEDDED
            ///////////////////
            /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
            // Tesla
          ],
          [VENDOR, [TYPE, EMBEDDED]],
          [
            /(aeobc)\b/i
            // Echo Dot
          ],
          [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]],
          [
            ////////////////////
            // MIXED (GENERIC)
            ///////////////////
            /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i
            // Android Phones from Unidentified Vendors
          ],
          [MODEL, [TYPE, MOBILE]],
          [
            /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
            // Android Tablets from Unidentified Vendors
          ],
          [MODEL, [TYPE, TABLET]],
          [
            /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
            // Unidentifiable Tablet
          ],
          [[TYPE, TABLET]],
          [
            /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
            // Unidentifiable Mobile
          ],
          [[TYPE, MOBILE]],
          [
            /(android[-\w\. ]{0,9});.+buil/i
            // Generic Android Device
          ],
          [MODEL, [VENDOR, "Generic"]]
        ],
        engine: [
          [
            /windows.+ edge\/([\w\.]+)/i
            // EdgeHTML
          ],
          [VERSION, [NAME, EDGE + "HTML"]],
          [
            /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
            // Blink
          ],
          [VERSION, [NAME, "Blink"]],
          [
            /(presto)\/([\w\.]+)/i,
            // Presto
            /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
            // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
            /ekioh(flow)\/([\w\.]+)/i,
            // Flow
            /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
            // KHTML/Tasman/Links
            /(icab)[\/ ]([23]\.[\d\.]+)/i,
            // iCab
            /\b(libweb)/i
          ],
          [NAME, VERSION],
          [
            /rv\:([\w\.]{1,9})\b.+(gecko)/i
            // Gecko
          ],
          [VERSION, NAME]
        ],
        os: [
          [
            // Windows
            /microsoft (windows) (vista|xp)/i
            // Windows (iTunes)
          ],
          [NAME, VERSION],
          [
            /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i
            // Windows Phone
          ],
          [NAME, [VERSION, strMapper, windowsVersionMap]],
          [
            /windows nt 6\.2; (arm)/i,
            // Windows RT
            /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
            /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
          ],
          [[VERSION, strMapper, windowsVersionMap], [NAME, "Windows"]],
          [
            // iOS/macOS
            /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
            // iOS
            /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
            /cfnetwork\/.+darwin/i
          ],
          [[VERSION, /_/g, "."], [NAME, "iOS"]],
          [
            /(mac os x) ?([\w\. ]*)/i,
            /(macintosh|mac_powerpc\b)(?!.+haiku)/i
            // Mac OS
          ],
          [[NAME, MAC_OS], [VERSION, /_/g, "."]],
          [
            // Mobile OSes
            /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
            // Android-x86/HarmonyOS
          ],
          [VERSION, NAME],
          [
            // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
            /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
            /(blackberry)\w*\/([\w\.]*)/i,
            // Blackberry
            /(tizen|kaios)[\/ ]([\w\.]+)/i,
            // Tizen/KaiOS
            /\((series40);/i
            // Series 40
          ],
          [NAME, VERSION],
          [
            /\(bb(10);/i
            // BlackBerry 10
          ],
          [VERSION, [NAME, BLACKBERRY]],
          [
            /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
            // Symbian
          ],
          [VERSION, [NAME, "Symbian"]],
          [
            /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
            // Firefox OS
          ],
          [VERSION, [NAME, FIREFOX + " OS"]],
          [
            /web0s;.+rt(tv)/i,
            /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
            // WebOS
          ],
          [VERSION, [NAME, "webOS"]],
          [
            /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
            // watchOS
          ],
          [VERSION, [NAME, "watchOS"]],
          [
            // Google Chromecast
            /crkey\/([\d\.]+)/i
            // Google Chromecast
          ],
          [VERSION, [NAME, CHROME + "cast"]],
          [
            /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
            // Chromium OS
          ],
          [[NAME, CHROMIUM_OS], VERSION],
          [
            // Smart TVs
            /panasonic;(viera)/i,
            // Panasonic Viera
            /(netrange)mmh/i,
            // Netrange
            /(nettv)\/(\d+\.[\w\.]+)/i,
            // NetTV
            // Console
            /(nintendo|playstation) ([wids345portablevuch]+)/i,
            // Nintendo/Playstation
            /(xbox); +xbox ([^\);]+)/i,
            // Microsoft Xbox (360, One, X, S, Series X, Series S)
            // Other
            /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
            // Joli/Palm
            /(mint)[\/\(\) ]?(\w*)/i,
            // Mint
            /(mageia|vectorlinux)[; ]/i,
            // Mageia/VectorLinux
            /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
            // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
            /(hurd|linux) ?([\w\.]*)/i,
            // Hurd/Linux
            /(gnu) ?([\w\.]*)/i,
            // GNU
            /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
            // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
            /(haiku) (\w+)/i
            // Haiku
          ],
          [NAME, VERSION],
          [
            /(sunos) ?([\w\.\d]*)/i
            // Solaris
          ],
          [[NAME, "Solaris"], VERSION],
          [
            /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
            // Solaris
            /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
            // AIX
            /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i,
            // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
            /(unix) ?([\w\.]*)/i
            // UNIX
          ],
          [NAME, VERSION]
        ]
      };
      var UAParser = function(ua, extensions) {
        if (typeof ua === OBJ_TYPE) {
          extensions = ua;
          ua = undefined2;
        }
        if (!(this instanceof UAParser)) {
          return new UAParser(ua, extensions).getResult();
        }
        var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined2;
        var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
        var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined2;
        var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
        var _isSelfNav = _navigator && _navigator.userAgent == _ua;
        this.getBrowser = function() {
          var _browser = {};
          _browser[NAME] = undefined2;
          _browser[VERSION] = undefined2;
          rgxMapper.call(_browser, _ua, _rgxmap.browser);
          _browser[MAJOR] = majorize(_browser[VERSION]);
          if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
            _browser[NAME] = "Brave";
          }
          return _browser;
        };
        this.getCPU = function() {
          var _cpu = {};
          _cpu[ARCHITECTURE] = undefined2;
          rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
          return _cpu;
        };
        this.getDevice = function() {
          var _device = {};
          _device[VENDOR] = undefined2;
          _device[MODEL] = undefined2;
          _device[TYPE] = undefined2;
          rgxMapper.call(_device, _ua, _rgxmap.device);
          if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
            _device[TYPE] = MOBILE;
          }
          if (_isSelfNav && _device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
            _device[MODEL] = "iPad";
            _device[TYPE] = TABLET;
          }
          return _device;
        };
        this.getEngine = function() {
          var _engine = {};
          _engine[NAME] = undefined2;
          _engine[VERSION] = undefined2;
          rgxMapper.call(_engine, _ua, _rgxmap.engine);
          return _engine;
        };
        this.getOS = function() {
          var _os = {};
          _os[NAME] = undefined2;
          _os[VERSION] = undefined2;
          rgxMapper.call(_os, _ua, _rgxmap.os);
          if (_isSelfNav && !_os[NAME] && _uach && _uach.platform && _uach.platform != "Unknown") {
            _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
          }
          return _os;
        };
        this.getResult = function() {
          return {
            ua: this.getUA(),
            browser: this.getBrowser(),
            engine: this.getEngine(),
            os: this.getOS(),
            device: this.getDevice(),
            cpu: this.getCPU()
          };
        };
        this.getUA = function() {
          return _ua;
        };
        this.setUA = function(ua2) {
          _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
          return this;
        };
        this.setUA(_ua);
        return this;
      };
      UAParser.VERSION = LIBVERSION;
      UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
      UAParser.CPU = enumerize([ARCHITECTURE]);
      UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
      UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
      if (typeof exports !== UNDEF_TYPE) {
        if (typeof module !== UNDEF_TYPE && module.exports) {
          exports = module.exports = UAParser;
        }
        exports.UAParser = UAParser;
      } else {
        if (typeof define === FUNC_TYPE && define.amd) {
          define(function() {
            return UAParser;
          });
        } else if (typeof window2 !== UNDEF_TYPE) {
          window2.UAParser = UAParser;
        }
      }
      var $2 = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
      if ($2 && !$2.ua) {
        var parser = new UAParser();
        $2.ua = parser.getResult();
        $2.ua.get = function() {
          return parser.getUA();
        };
        $2.ua.set = function(ua) {
          parser.setUA(ua);
          var result = parser.getResult();
          for (var prop in result) {
            $2.ua[prop] = result[prop];
          }
        };
      }
    })(typeof window === "object" ? window : exports);
  }
});

// node_modules/@passageidentity/webauthnutils/dist/index.js
var import_ua_parser_js = __toESM(require_ua_parser());
var n = (e2, r2, i3) => new Promise((t2, a) => {
  var u3 = (s) => {
    try {
      c3(i3.next(s));
    } catch (p2) {
      a(p2);
    }
  }, g3 = (s) => {
    try {
      c3(i3.throw(s));
    } catch (p2) {
      a(p2);
    }
  }, c3 = (s) => s.done ? t2(s.value) : Promise.resolve(s.value).then(u3, g3);
  c3((i3 = i3.apply(e2, r2)).next());
});
var C = (e2, r2) => n(void 0, null, function* () {
  let i3, t2 = new Promise((a) => {
    i3 = setTimeout(a, r2);
  });
  return Promise.race([e2, t2]).then((a) => (clearTimeout(i3), a));
});
var o = class {
  static encodeBytes(e2) {
    let r2 = btoa(String.fromCharCode(...new Uint8Array(e2))).replace(/\+/g, "-").replace(/\//g, "_");
    return P(r2);
  }
  static decodeBytes(e2) {
    let r2 = e2.replace(/-/g, "+").replace(/_/g, "/"), i3 = P(r2);
    return Uint8Array.from(atob(i3), (t2) => t2.charCodeAt(0));
  }
};
var P = (e2) => {
  let r2 = e2.indexOf("=");
  return e2.slice(0, r2 === -1 ? e2.length : r2);
};
var m = ((e2) => (e2.Platform = "platform", e2.CrossPlatform = "cross-platform", e2.Any = "any", e2))(m || {});
var f = ((e2) => (e2[e2.MultipleChoice = 300] = "MultipleChoice", e2[e2.MovedPermanantly = 301] = "MovedPermanantly", e2[e2.Found = 302] = "Found", e2[e2.SeeOther = 303] = "SeeOther", e2[e2.NotModified = 304] = "NotModified", e2[e2.TemporaryRedirect = 307] = "TemporaryRedirect", e2[e2.PermanentRedirect = 308] = "PermanentRedirect", e2[e2.BadRequest = 400] = "BadRequest", e2[e2.Unauthorized = 401] = "Unauthorized", e2[e2.PaymentRequired = 402] = "PaymentRequired", e2[e2.Forbidden = 403] = "Forbidden", e2[e2.NotFound = 404] = "NotFound", e2[e2.MethodNotAllowed = 405] = "MethodNotAllowed", e2[e2.NotAcceptable = 406] = "NotAcceptable", e2[e2.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", e2[e2.RequestTimeout = 408] = "RequestTimeout", e2[e2.Conflict = 409] = "Conflict", e2[e2.Gone = 410] = "Gone", e2[e2.LengthRequired = 411] = "LengthRequired", e2[e2.PreconditionFailed = 412] = "PreconditionFailed", e2[e2.PayloadTooLarge = 413] = "PayloadTooLarge", e2[e2.URITooLong = 414] = "URITooLong", e2[e2.UnsupportedMediaType = 415] = "UnsupportedMediaType", e2[e2.RangeNotSatisfiable = 416] = "RangeNotSatisfiable", e2[e2.ExpectationFailed = 417] = "ExpectationFailed", e2[e2.MisdirectedRequest = 421] = "MisdirectedRequest", e2[e2.UnprocessableEntity = 422] = "UnprocessableEntity", e2[e2.Locked = 423] = "Locked", e2[e2.FailedDependency = 424] = "FailedDependency", e2[e2.TooEarly = 425] = "TooEarly", e2[e2.UpgradeRequired = 426] = "UpgradeRequired", e2[e2.PreconditionRequired = 428] = "PreconditionRequired", e2[e2.TooManyRequests = 429] = "TooManyRequests", e2[e2.RequestHeaderFieldsTooLarge = 431] = "RequestHeaderFieldsTooLarge", e2[e2.UnavailableForLegalReasons = 451] = "UnavailableForLegalReasons", e2[e2.InternalServerError = 500] = "InternalServerError", e2[e2.NotImplemented = 501] = "NotImplemented", e2[e2.BadGateway = 502] = "BadGateway", e2[e2.ServiceUnavailable = 503] = "ServiceUnavailable", e2[e2.GatewayTimeout = 504] = "GatewayTimeout", e2[e2.HTTPVersionNotSupported = 505] = "HTTPVersionNotSupported", e2[e2.VariantAlsoNegotiates = 506] = "VariantAlsoNegotiates", e2[e2.InsufficientStorage = 507] = "InsufficientStorage", e2[e2.LoopDetected = 508] = "LoopDetected", e2[e2.NotExtended = 510] = "NotExtended", e2[e2.NetworkAuthenticationRequired = 511] = "NetworkAuthenticationRequired", e2[e2.PSGCredObjectDoesNotExist = 700] = "PSGCredObjectDoesNotExist", e2[e2.PSGParsePublicKeyForNewDeviceFailed = 701] = "PSGParsePublicKeyForNewDeviceFailed", e2[e2.PSGParsePublicKeyForLoginFailed = 702] = "PSGParsePublicKeyForLoginFailed", e2[e2.PSGCouldNotGetUserCredential = 703] = "PSGCouldNotGetUserCredential", e2[e2.PSGLoginRequired = 704] = "PSGLoginRequired", e2[e2.PSGSecureContextRequired = 705] = "PSGSecureContextRequired", e2[e2.PSGSocialSessionStorageError = 706] = "PSGSocialSessionStorageError", e2[e2.PSGParsePublicKeyForRegistrationFailed = 707] = "PSGParsePublicKeyForRegistrationFailed", e2[e2.PSGCanAuthenticateWithPasskeyFailed = 708] = "PSGCanAuthenticateWithPasskeyFailed", e2[e2.PSGCanRegisterWithPasskeyFailed = 709] = "PSGCanRegisterWithPasskeyFailed", e2[e2.PSGCanUseConditionalMediationFailed = 710] = "PSGCanUseConditionalMediationFailed", e2[e2.PSGAuthOriginConfigurationError = 711] = "PSGAuthOriginConfigurationError", e2))(f || {});
var d = class {
  static createCredentialAvailable() {
    return n(this, null, function* () {
      let r2 = { securityKey: false, platform: false, isAvailable: false };
      return window.PublicKeyCredential && (r2.securityKey = true, r2.isAvailable = true, yield C(window.PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable().then((i3) => {
        r2.platform = i3;
      }).catch(() => console.log("Something went wrong.")), 1e3)), r2;
    });
  }
  static parsePublicKey(r2) {
    if (r2.challenge = o.decodeBytes(r2.challenge.toString()), r2.user.id = o.decodeBytes(r2.user.id.toString()), r2.excludeCredentials) for (let i3 = 0; i3 < r2.excludeCredentials.length; i3++) {
      let t2 = r2.excludeCredentials[i3];
      t2.id = o.decodeBytes(t2.id.toString());
    }
    return r2;
  }
  static getTransports(r2) {
    let i3 = [];
    return r2.response.getTransports && typeof r2.response.getTransports == "function" && (i3 = r2.response.getTransports()), i3;
  }
  static createCredential(r2) {
    return n(this, null, function* () {
      let i3 = { credential: null, transports: [] }, t2 = this.parsePublicKey(r2), a = yield navigator.credentials.create({ publicKey: t2 }).then((u3) => u3);
      return a == null || (i3.credential = a, i3.transports = this.getTransports(a)), i3;
    });
  }
};
var l = class {
  constructor() {
    this.userAgent = new import_ua_parser_js.default();
  }
  getSyncedCredential() {
    return !!(this._isiOSPasskeySupported() || this._isMacPasskeySupported() || this._isChromeSyncedCredential() || this._isFireFoxPasskeySupported());
  }
  getCrossDeviceCredential() {
    return !!(this._isiOSPasskeySupported() || this._isMacPasskeySupported() || this._isChromiumCrossDevice() || this._isFireFoxPasskeySupported());
  }
  _isiOSPasskeySupported() {
    return this.userAgent.getOS().name == "iOS" && parseFloat(this.userAgent.getOS().version || "") >= 16;
  }
  _isMacPasskeySupported() {
    return this.userAgent.getBrowser().name == "Safari" && parseFloat(this.userAgent.getBrowser().version || "") >= 16 && this.userAgent.getOS().name == "Mac OS";
  }
  _isChromeSyncedCredential() {
    var t2;
    let r2 = (t2 = this.userAgent.getOS().name) != null ? t2 : "";
    return ((r2 == null ? void 0 : r2.includes("Windows")) || (r2 == null ? void 0 : r2.includes("Mac OS")) || (r2 == null ? void 0 : r2.includes("Android"))) && this.userAgent.getBrowser().name == "Chrome" && parseFloat(this.userAgent.getBrowser().version || "") >= 108;
  }
  _isChromiumCrossDevice() {
    return this.userAgent.getOS().name === "Android" ? false : this.userAgent.getEngine().name == "Blink" && parseFloat(this.userAgent.getBrowser().version || "") >= 109;
  }
  _isFireFoxPasskeySupported() {
    return this.userAgent.getBrowser().name == "Firefox" && parseFloat(this.userAgent.getBrowser().version || "") >= 122;
  }
};
var y = class {
  static parsePublicKey(r2) {
    if (r2.challenge = o.decodeBytes(r2.challenge.toString()), r2.allowCredentials) {
      for (let i3 = 0; i3 < r2.allowCredentials.length; i3++) {
        let t2 = r2.allowCredentials[i3];
        t2.id = o.decodeBytes(t2.id.toString());
      }
      return r2;
    }
    return r2;
  }
  static getCredential(r2, i3) {
    return n(this, null, function* () {
      return yield navigator.credentials.get({ mediation: i3 == null ? void 0 : i3.mediation, signal: i3 == null ? void 0 : i3.signal, publicKey: this.parsePublicKey(r2) }).then((a) => a).catch((a) => (console.info(a), null));
    });
  }
  static getCredentialAvailable() {
    return n(this, null, function* () {
      let r2 = { securityKey: false, platform: false, syncedCredential: false, crossDeviceCredential: false, conditionalUI: false, isAvailable: false }, i3 = yield d.createCredentialAvailable();
      if (r2.securityKey = i3.securityKey, r2.platform = i3.platform, r2.isAvailable = i3.isAvailable, !r2.securityKey) return r2;
      let t2 = yield this._getClientCapabalities();
      if (t2 !== void 0) return t2;
      r2.conditionalUI = yield this._isConditionalMediationAvailable();
      let a = new l();
      return r2.syncedCredential = a.getSyncedCredential(), r2.crossDeviceCredential = a.getCrossDeviceCredential(), r2;
    });
  }
  static _isConditionalMediationAvailable() {
    return n(this, null, function* () {
      return PublicKeyCredential.isConditionalMediationAvailable ? yield PublicKeyCredential.isConditionalMediationAvailable() : false;
    });
  }
  static _getClientCapabalities() {
    return n(this, null, function* () {
      if (window.PublicKeyCredential) {
        let r2 = window.PublicKeyCredential;
        if (r2.getClientCapabilities) {
          let i3 = yield r2.getClientCapabilities();
          return { securityKey: true, platform: i3.userVerifyingPlatformAuthenticator, syncedCredential: i3.passkeyPlatformAuthenticator, crossDeviceCredential: i3.hybridTransport, conditionalUI: i3.conditionalMediation, isAvailable: true };
        }
      }
    });
  }
};

// node_modules/js-cookie/dist/js.cookie.mjs
function assign(target) {
  for (var i3 = 1; i3 < arguments.length; i3++) {
    var source = arguments[i3];
    for (var key in source) {
      target[key] = source[key];
    }
  }
  return target;
}
var defaultConverter = {
  read: function(value) {
    if (value[0] === '"') {
      value = value.slice(1, -1);
    }
    return value.replace(/(%[\dA-F]{2})+/gi, decodeURIComponent);
  },
  write: function(value) {
    return encodeURIComponent(value).replace(
      /%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,
      decodeURIComponent
    );
  }
};
function init(converter, defaultAttributes) {
  function set(name, value, attributes) {
    if (typeof document === "undefined") {
      return;
    }
    attributes = assign({}, defaultAttributes, attributes);
    if (typeof attributes.expires === "number") {
      attributes.expires = new Date(Date.now() + attributes.expires * 864e5);
    }
    if (attributes.expires) {
      attributes.expires = attributes.expires.toUTCString();
    }
    name = encodeURIComponent(name).replace(/%(2[346B]|5E|60|7C)/g, decodeURIComponent).replace(/[()]/g, escape);
    var stringifiedAttributes = "";
    for (var attributeName in attributes) {
      if (!attributes[attributeName]) {
        continue;
      }
      stringifiedAttributes += "; " + attributeName;
      if (attributes[attributeName] === true) {
        continue;
      }
      stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
    }
    return document.cookie = name + "=" + converter.write(value, name) + stringifiedAttributes;
  }
  function get(name) {
    if (typeof document === "undefined" || arguments.length && !name) {
      return;
    }
    var cookies = document.cookie ? document.cookie.split("; ") : [];
    var jar = {};
    for (var i3 = 0; i3 < cookies.length; i3++) {
      var parts = cookies[i3].split("=");
      var value = parts.slice(1).join("=");
      try {
        var found = decodeURIComponent(parts[0]);
        jar[found] = converter.read(value, found);
        if (name === found) {
          break;
        }
      } catch (e2) {
      }
    }
    return name ? jar[name] : jar;
  }
  return Object.create(
    {
      set,
      get,
      remove: function(name, attributes) {
        set(
          name,
          "",
          assign({}, attributes, {
            expires: -1
          })
        );
      },
      withAttributes: function(attributes) {
        return init(this.converter, assign({}, this.attributes, attributes));
      },
      withConverter: function(converter2) {
        return init(assign({}, this.converter, converter2), this.attributes);
      }
    },
    {
      attributes: { value: Object.freeze(defaultAttributes) },
      converter: { value: Object.freeze(converter) }
    }
  );
}
var api = init(defaultConverter, { path: "/" });

// node_modules/jwt-decode/build/jwt-decode.esm.js
function e(e2) {
  this.message = e2;
}
e.prototype = new Error(), e.prototype.name = "InvalidCharacterError";
var r = "undefined" != typeof window && window.atob && window.atob.bind(window) || function(r2) {
  var t2 = String(r2).replace(/=+$/, "");
  if (t2.length % 4 == 1) throw new e("'atob' failed: The string to be decoded is not correctly encoded.");
  for (var n5, o4, a = 0, i3 = 0, c3 = ""; o4 = t2.charAt(i3++); ~o4 && (n5 = a % 4 ? 64 * n5 + o4 : o4, a++ % 4) ? c3 += String.fromCharCode(255 & n5 >> (-2 * a & 6)) : 0) o4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o4);
  return c3;
};
function t(e2) {
  var t2 = e2.replace(/-/g, "+").replace(/_/g, "/");
  switch (t2.length % 4) {
    case 0:
      break;
    case 2:
      t2 += "==";
      break;
    case 3:
      t2 += "=";
      break;
    default:
      throw "Illegal base64url string!";
  }
  try {
    return function(e3) {
      return decodeURIComponent(r(e3).replace(/(.)/g, function(e4, r2) {
        var t3 = r2.charCodeAt(0).toString(16).toUpperCase();
        return t3.length < 2 && (t3 = "0" + t3), "%" + t3;
      }));
    }(t2);
  } catch (e3) {
    return r(t2);
  }
}
function n2(e2) {
  this.message = e2;
}
function o2(e2, r2) {
  if ("string" != typeof e2) throw new n2("Invalid token specified");
  var o4 = true === (r2 = r2 || {}).header ? 0 : 1;
  try {
    return JSON.parse(t(e2.split(".")[o4]));
  } catch (e3) {
    throw new n2("Invalid token specified: " + e3.message);
  }
}
n2.prototype = new Error(), n2.prototype.name = "InvalidTokenError";
var jwt_decode_esm_default = o2;

// node_modules/async-mutex/index.mjs
var E_TIMEOUT = new Error("timeout while waiting for mutex to become available");
var E_ALREADY_LOCKED = new Error("mutex already locked");
var E_CANCELED = new Error("request for lock canceled");
var __awaiter$2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Semaphore = class {
  constructor(_value, _cancelError = E_CANCELED) {
    this._value = _value;
    this._cancelError = _cancelError;
    this._weightedQueues = [];
    this._weightedWaiters = [];
  }
  acquire(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve, reject) => {
      if (!this._weightedQueues[weight - 1])
        this._weightedQueues[weight - 1] = [];
      this._weightedQueues[weight - 1].push({ resolve, reject });
      this._dispatch();
    });
  }
  runExclusive(callback, weight = 1) {
    return __awaiter$2(this, void 0, void 0, function* () {
      const [value, release] = yield this.acquire(weight);
      try {
        return yield callback(value);
      } finally {
        release();
      }
    });
  }
  waitForUnlock(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    return new Promise((resolve) => {
      if (!this._weightedWaiters[weight - 1])
        this._weightedWaiters[weight - 1] = [];
      this._weightedWaiters[weight - 1].push(resolve);
      this._dispatch();
    });
  }
  isLocked() {
    return this._value <= 0;
  }
  getValue() {
    return this._value;
  }
  setValue(value) {
    this._value = value;
    this._dispatch();
  }
  release(weight = 1) {
    if (weight <= 0)
      throw new Error(`invalid weight ${weight}: must be positive`);
    this._value += weight;
    this._dispatch();
  }
  cancel() {
    this._weightedQueues.forEach((queue) => queue.forEach((entry) => entry.reject(this._cancelError)));
    this._weightedQueues = [];
  }
  _dispatch() {
    var _a;
    for (let weight = this._value; weight > 0; weight--) {
      const queueEntry = (_a = this._weightedQueues[weight - 1]) === null || _a === void 0 ? void 0 : _a.shift();
      if (!queueEntry)
        continue;
      const previousValue = this._value;
      const previousWeight = weight;
      this._value -= weight;
      weight = this._value + 1;
      queueEntry.resolve([previousValue, this._newReleaser(previousWeight)]);
    }
    this._drainUnlockWaiters();
  }
  _newReleaser(weight) {
    let called = false;
    return () => {
      if (called)
        return;
      called = true;
      this.release(weight);
    };
  }
  _drainUnlockWaiters() {
    for (let weight = this._value; weight > 0; weight--) {
      if (!this._weightedWaiters[weight - 1])
        continue;
      this._weightedWaiters[weight - 1].forEach((waiter) => waiter());
      this._weightedWaiters[weight - 1] = [];
    }
  }
};
var __awaiter$1 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e2) {
        reject(e2);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e2) {
        reject(e2);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var Mutex = class {
  constructor(cancelError) {
    this._semaphore = new Semaphore(1, cancelError);
  }
  acquire() {
    return __awaiter$1(this, void 0, void 0, function* () {
      const [, releaser] = yield this._semaphore.acquire();
      return releaser;
    });
  }
  runExclusive(callback) {
    return this._semaphore.runExclusive(() => callback());
  }
  isLocked() {
    return this._semaphore.isLocked();
  }
  waitForUnlock() {
    return this._semaphore.waitForUnlock();
  }
  release() {
    if (this._semaphore.isLocked())
      this._semaphore.release();
  }
  cancel() {
    return this._semaphore.cancel();
  }
};

// node_modules/serialize-error/error-constructors.js
var list = [
  // Native ES errors https://262.ecma-international.org/12.0/#sec-well-known-intrinsic-objects
  EvalError,
  RangeError,
  ReferenceError,
  SyntaxError,
  TypeError,
  URIError,
  // Built-in errors
  globalThis.DOMException,
  // Node-specific errors
  // https://nodejs.org/api/errors.html
  globalThis.AssertionError,
  globalThis.SystemError
].filter(Boolean).map(
  (constructor) => [constructor.name, constructor]
);
var errorConstructors = new Map(list);

// node_modules/@passageidentity/passage-elements/node_modules/@passageidentity/passage-js/dist/index.js
var c = class {
  static encodeBytes(t2) {
    let e2 = btoa(String.fromCharCode(...new Uint8Array(t2))).replace(/\+/g, "-").replace(/\//g, "_");
    return j(e2);
  }
  static decodeBytes(t2) {
    let e2 = t2.replace(/-/g, "+").replace(/_/g, "/"), r2 = j(e2);
    return Uint8Array.from(atob(r2), (o4) => o4.charCodeAt(0));
  }
};
var j = (t2) => {
  let e2 = t2.indexOf("=");
  return t2.slice(0, e2 === -1 ? t2.length : e2);
};
var T = ((t2) => (t2.Platform = "platform", t2.CrossPlatform = "cross-platform", t2.Any = "any", t2))(T || {});
var u = class extends Error {
  constructor(t2, e2) {
    super();
    __publicField(this, "statusCode");
    __publicField(this, "statusText");
    __publicField(this, "message");
    __publicField(this, "name");
    this.name = "PassageError", this.statusCode = e2.status, this.statusText = e2.statusText, this.message = this._parsePsgErrorResponse(t2);
  }
  _parsePsgErrorResponse(t2) {
    try {
      return t2 = JSON.parse(t2), t2.error ? t2.error : "";
    } catch {
      return t2;
    }
  }
};
var g = ((t2) => (t2[t2.MultipleChoice = 300] = "MultipleChoice", t2[t2.MovedPermanantly = 301] = "MovedPermanantly", t2[t2.Found = 302] = "Found", t2[t2.SeeOther = 303] = "SeeOther", t2[t2.NotModified = 304] = "NotModified", t2[t2.TemporaryRedirect = 307] = "TemporaryRedirect", t2[t2.PermanentRedirect = 308] = "PermanentRedirect", t2[t2.BadRequest = 400] = "BadRequest", t2[t2.Unauthorized = 401] = "Unauthorized", t2[t2.PaymentRequired = 402] = "PaymentRequired", t2[t2.Forbidden = 403] = "Forbidden", t2[t2.NotFound = 404] = "NotFound", t2[t2.MethodNotAllowed = 405] = "MethodNotAllowed", t2[t2.NotAcceptable = 406] = "NotAcceptable", t2[t2.ProxyAuthenticationRequired = 407] = "ProxyAuthenticationRequired", t2[t2.RequestTimeout = 408] = "RequestTimeout", t2[t2.Conflict = 409] = "Conflict", t2[t2.Gone = 410] = "Gone", t2[t2.LengthRequired = 411] = "LengthRequired", t2[t2.PreconditionFailed = 412] = "PreconditionFailed", t2[t2.PayloadTooLarge = 413] = "PayloadTooLarge", t2[t2.URITooLong = 414] = "URITooLong", t2[t2.UnsupportedMediaType = 415] = "UnsupportedMediaType", t2[t2.RangeNotSatisfiable = 416] = "RangeNotSatisfiable", t2[t2.ExpectationFailed = 417] = "ExpectationFailed", t2[t2.MisdirectedRequest = 421] = "MisdirectedRequest", t2[t2.UnprocessableEntity = 422] = "UnprocessableEntity", t2[t2.Locked = 423] = "Locked", t2[t2.FailedDependency = 424] = "FailedDependency", t2[t2.TooEarly = 425] = "TooEarly", t2[t2.UpgradeRequired = 426] = "UpgradeRequired", t2[t2.PreconditionRequired = 428] = "PreconditionRequired", t2[t2.TooManyRequests = 429] = "TooManyRequests", t2[t2.RequestHeaderFieldsTooLarge = 431] = "RequestHeaderFieldsTooLarge", t2[t2.UnavailableForLegalReasons = 451] = "UnavailableForLegalReasons", t2[t2.InternalServerError = 500] = "InternalServerError", t2[t2.NotImplemented = 501] = "NotImplemented", t2[t2.BadGateway = 502] = "BadGateway", t2[t2.ServiceUnavailable = 503] = "ServiceUnavailable", t2[t2.GatewayTimeout = 504] = "GatewayTimeout", t2[t2.HTTPVersionNotSupported = 505] = "HTTPVersionNotSupported", t2[t2.VariantAlsoNegotiates = 506] = "VariantAlsoNegotiates", t2[t2.InsufficientStorage = 507] = "InsufficientStorage", t2[t2.LoopDetected = 508] = "LoopDetected", t2[t2.NotExtended = 510] = "NotExtended", t2[t2.NetworkAuthenticationRequired = 511] = "NetworkAuthenticationRequired", t2[t2.PSGCredObjectDoesNotExist = 700] = "PSGCredObjectDoesNotExist", t2[t2.PSGParsePublicKeyForNewDeviceFailed = 701] = "PSGParsePublicKeyForNewDeviceFailed", t2[t2.PSGParsePublicKeyForLoginFailed = 702] = "PSGParsePublicKeyForLoginFailed", t2[t2.PSGCouldNotGetUserCredential = 703] = "PSGCouldNotGetUserCredential", t2[t2.PSGLoginRequired = 704] = "PSGLoginRequired", t2[t2.PSGSecureContextRequired = 705] = "PSGSecureContextRequired", t2[t2.PSGSocialSessionStorageError = 706] = "PSGSocialSessionStorageError", t2[t2.PSGParsePublicKeyForRegistrationFailed = 707] = "PSGParsePublicKeyForRegistrationFailed", t2[t2.PSGCanAuthenticateWithPasskeyFailed = 708] = "PSGCanAuthenticateWithPasskeyFailed", t2[t2.PSGCanRegisterWithPasskeyFailed = 709] = "PSGCanRegisterWithPasskeyFailed", t2[t2.PSGCanUseConditionalMediationFailed = 710] = "PSGCanUseConditionalMediationFailed", t2[t2.PSGAuthOriginConfigurationError = 711] = "PSGAuthOriginConfigurationError", t2))(g || {});
async function i(t2) {
  if (!t2.ok) return await t2.text().then((e2) => {
    throw new u(e2, t2);
  });
  if (t2.status !== 204) return t2.json();
}
var y2 = class {
  psgCredIDExists(e2) {
    let r2 = e2.user.id, o4 = e2.handshake.challenge.publicKey.allowCredentials, s = this.getPsgCredObj();
    if (!s) throw new u("Could not get psg_cred_obj", { status: g.PSGCredObjectDoesNotExist, statusText: "PSG Cred Object Does Not Exist" });
    let h = JSON.parse(s)[r2];
    return h ? o4.find((P2) => {
      if (c.encodeBytes(c.decodeBytes(P2.id)) === c.encodeBytes(c.decodeBytes(h))) return true;
    }) : false;
  }
  setPsgCredID(e2, r2) {
    if (!r2) throw new u("Could not get user's credential", { status: g.PSGCouldNotGetUserCredential, statusText: "PSG Could Not Get User Credential" });
    let o4 = this.getPsgCredObj();
    if (o4) {
      let s = JSON.parse(o4);
      s[e2] = r2 == null ? void 0 : r2.id, this.setPsgCredObj(JSON.stringify(s));
    } else this.setPsgCredObj(JSON.stringify({ [e2]: r2 == null ? void 0 : r2.id }));
  }
  removeCredential(e2) {
    let r2 = this.getPsgCredObj();
    if (r2 === void 0) return;
    let o4 = JSON.parse(r2);
    Object.keys(o4).forEach((s) => {
      o4[s] === e2 && delete o4[s];
    }), this.setPsgCredObj(JSON.stringify(o4));
  }
  getPsgCredObj() {
    let e2 = api.get("psg_cred_obj"), r2 = localStorage.getItem("psg_cred_obj");
    if (e2 !== void 0) return api.set("psg_cred_obj", e2, { expires: 400, sameSite: "Strict" }), r2 === null && localStorage.setItem("psg_cred_obj", e2), e2;
    if (r2 !== null) return api.set("psg_cred_obj", r2, { expires: 400, sameSite: "Strict" }), r2;
  }
  setPsgCredObj(e2) {
    api.set("psg_cred_obj", e2, { expires: 400, sameSite: "Strict" }), localStorage.setItem("psg_cred_obj", e2);
  }
};
var q = { URL: "https://auth.passage.id", version: "@passageidentity/passage-js 3.14.6", CAPTURE_EVENT_URL: "https://us-central1-passage-prod.cloudfunctions.net/capture-event", SENTRY_RELEASE: "passage-js@3.14.6-prod", SENTRY_PROJECT: "passage-js", SENTRY_PROJECT_DSN: "", SENTRY_PROJECT_ENV: "prod", SENTRY_PROJECT_VERSION: "3.14.6" };
var f2 = q;
function n3(t2) {
  var s;
  let e2 = new Headers(t2), r2 = f2.version, o4 = f2.EXTRA_HEADERS;
  if (r2 && e2.append("Passage-Version", r2), o4) {
    let h = ((s = o4.find((a) => a.hasOwnProperty("elementVersion"))) == null ? void 0 : s.elementVersion) || null;
    h && e2.append("Passage-Element-Version", h);
  }
  return e2;
}
var B = class {
  getRefreshToken() {
    return Promise.resolve(void 0);
  }
};
var G = class extends B {
  clearTokens() {
    return Promise.resolve();
  }
};
var N = class extends G {
  constructor() {
    super(...arguments);
    this.noLocalStorage = typeof window > "u";
    this.noLocalStorageError = (r2) => "Failed to access localStorage or cookies. Must be run client-side.";
  }
  getAuthToken() {
    if (this.noLocalStorage) return Promise.reject(this.noLocalStorageError("getAuthToken"));
    let r2 = localStorage.getItem("psg_auth_token");
    return r2 === null ? Promise.resolve("") : Promise.resolve(r2);
  }
  setAuthToken(r2) {
    if (this.noLocalStorage) return Promise.reject(this.noLocalStorageError("setAuthToken"));
    localStorage.setItem("psg_auth_token", r2);
    let o4 = !this._isHttps() && this._isLocalHost();
    return document.cookie = `psg_auth_token = ${r2}; path=/ ${o4 ? "" : ";secure"}`, Promise.resolve();
  }
  getRefreshToken() {
    this.noLocalStorage && Promise.reject(this.noLocalStorageError("getRefreshToken"));
    let r2 = localStorage.getItem("psg_refresh_token");
    return r2 === null ? Promise.resolve(void 0) : Promise.resolve(r2);
  }
  setRefreshToken(r2) {
    return this.noLocalStorage && Promise.reject(this.noLocalStorageError("setRefreshToken")), localStorage.setItem("psg_refresh_token", r2), Promise.resolve();
  }
  setTokens(r2) {
    return this.noLocalStorage && Promise.reject(this.noLocalStorageError("setTokens")), this.setAuthToken(r2.auth_token), r2.refresh_token && this.setRefreshToken(r2.refresh_token), Promise.resolve();
  }
  clearTokens() {
    return this.noLocalStorage && Promise.reject(this.noLocalStorageError("clearTokens")), localStorage.removeItem("psg_auth_token"), document.cookie = "psg_auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC;", localStorage.removeItem("psg_refresh_token"), Promise.resolve();
  }
  _isLocalHost() {
    return Boolean(window.location.hostname === "localhost" || window.location.hostname === "[::1]" || window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));
  }
  _isHttps() {
    return location.protocol === "https:";
  }
};
function b2(t2) {
  return t2.setTokens !== void 0;
}
var $ = (t2) => typeof t2 == "object" && t2 !== null && typeof t2.auth_result < "u";
function S(t2, e2) {
  return $(t2) ? (b2(e2) && e2.setTokens(t2.auth_result), t2) : (console.warn("Not a valid auth response"), t2);
}
var K = new y2();
var O = class {
  constructor(e2, r2, o4) {
    this.tokenStore = r2;
    this.apiUrl = e2 + "/register/", this.identifier = o4;
  }
  async withWebAuthn(e2) {
    var m2;
    let r2 = await fetch(this.apiUrl + "webauthn/start", { headers: n3(), body: JSON.stringify({ identifier: this.identifier, authenticator_attachment: (m2 = e2 == null ? void 0 : e2.authenticatorAttachment) != null ? m2 : T.Platform }), method: "POST" }).then(i), o4 = r2.handshake.challenge.publicKey, { credential: s, transports: h } = await d.createCredential(o4).catch((k) => {
      throw new u("error parsing public key for webAuthn", { status: g.PSGParsePublicKeyForLoginFailed, statusText: "PSG Parse Public Key For Login Failed" });
    }), a = new Uint8Array(s == null ? void 0 : s.response.attestationObject), P2 = r2.user.id, _ = await fetch(this.apiUrl + "webauthn/finish", { headers: n3(), method: "POST", body: JSON.stringify({ user_id: P2, handshake_id: r2.handshake.id, handshake_response: { rawId: c.encodeBytes(s == null ? void 0 : s.rawId), id: s == null ? void 0 : s.id, type: s == null ? void 0 : s.type, response: { attestationObject: c.encodeBytes(a), clientDataJSON: c.encodeBytes(s == null ? void 0 : s.response.clientDataJSON) }, transports: h } }) }).then(i).then((k) => S(k, this.tokenStore));
    return K.setPsgCredID(P2, s), _.auth_result;
  }
};
var C2 = class {
  constructor(e2, r2, o4) {
    this.tokenStore = r2;
    this.apiUrl = e2 + "/login/", this.identifier = o4 != null ? o4 : "";
  }
  async withWebAuthn(e2) {
    let r2 = JSON.stringify({ identifier: this.identifier }), o4 = this.identifier ? r2 : void 0, s = await fetch(this.apiUrl + "webauthn/start", { headers: n3(), method: "POST", body: o4 }).then(i), h = s.handshake.challenge.publicKey, a = await y.getCredential(h, e2).catch((_) => {
      throw new u("error parsing public key for webAuthn", { status: g.PSGParsePublicKeyForLoginFailed, statusText: "PSG Parse Public Key For Login Failed" });
    });
    return a ? (await fetch(this.apiUrl + "webauthn/finish", { headers: n3(), method: "POST", body: JSON.stringify({ user_id: this.identifier ? s.user.id : void 0, handshake_id: s.handshake.id, handshake_response: { id: a.id, rawId: c.encodeBytes(a.rawId), type: a.type, response: { clientDataJSON: c.encodeBytes(a.response.clientDataJSON), authenticatorData: c.encodeBytes(a.response.authenticatorData), signature: c.encodeBytes(a.response.signature), userHandle: c.encodeBytes(a.response.userHandle) } } }) }).then(i).then((_) => S(_, this.tokenStore))).auth_result : { auth_token: "", redirect_url: "" };
  }
};
var v = class {
  constructor(e2) {
    this.apiUrl = e2;
  }
  async appInfo() {
    return (await fetch(this.apiUrl, { headers: n3(), method: "GET" }).then(i)).app;
  }
  async identifierExists(e2) {
    return (await fetch(this.apiUrl + "/users?identifier=" + encodeURIComponent(e2), { headers: n3(), method: "GET" }).then(i)).user;
  }
};
var w = class {
  constructor(e2, r2) {
    this.tokenStore = r2;
    this.apiUrl = e2;
  }
  async newRegister(e2, r2) {
    return (await fetch(this.apiUrl + "/register/magic-link", { headers: n3(), method: "POST", body: JSON.stringify({ identifier: e2, magic_link_path: window.location.pathname + window.location.search + window.location.hash, language: r2 }) }).then(i)).magic_link;
  }
  async newLogin(e2, r2) {
    return (await fetch(this.apiUrl + "/login/magic-link", { headers: n3(), method: "POST", body: JSON.stringify({ identifier: e2, magic_link_path: window.location.pathname + window.location.search + window.location.hash, language: r2 }) }).then(i)).magic_link;
  }
  async getStatus(e2) {
    return (await fetch(this.apiUrl + "/magic-link/status", { headers: n3(), method: "POST", body: JSON.stringify({ id: e2 }) }).then(i).then((o4) => S(o4, this.tokenStore))).auth_result;
  }
  async activate(e2) {
    return (await fetch(this.apiUrl + "/magic-link/activate", { headers: n3(), method: "PATCH", body: JSON.stringify({ magic_link: e2 }) }).then(i).then((o4) => S(o4, this.tokenStore))).auth_result;
  }
  _parsePublicKeyLogin(e2) {
    if (e2.challenge = c.decodeBytes(e2.challenge.toString()), e2.allowCredentials) {
      for (let r2 = 0; r2 < e2.allowCredentials.length; r2++) {
        let o4 = e2.allowCredentials[r2];
        o4.id = c.decodeBytes(o4.id.toString());
      }
      return e2;
    }
    return e2;
  }
  _parsePublicKeyNewDevice(e2) {
    return e2.challenge = c.decodeBytes(e2.challenge.toString()), e2.user.id = c.decodeBytes(e2.user.id.toString()), e2;
  }
};
var R = class {
  constructor(e2, r2) {
    this.tokenStore = r2;
    this.apiUrl = e2;
  }
  async newRegister(e2, r2) {
    return await fetch(this.apiUrl + "/register/otp", { headers: n3(), method: "POST", body: JSON.stringify({ identifier: e2, language: r2 }) }).then(i);
  }
  async newLogin(e2, r2) {
    return await fetch(this.apiUrl + "/login/otp", { headers: n3(), method: "POST", body: JSON.stringify({ identifier: e2, language: r2 }) }).then(i);
  }
  async activate(e2, r2) {
    return (await fetch(this.apiUrl + "/otp/activate", { headers: n3(), method: "POST", body: JSON.stringify({ otp: e2, otp_id: r2 }) }).then(i).then((s) => S(s, this.tokenStore))).auth_result;
  }
};
var Y = ((o4) => (o4.ACTIVE = "active", o4.INACTIVE = "inactive", o4.PENDING = "pending", o4))(Y || {});
var H = ((o4) => (o4.Platform = "platform", o4.Passkey = "passkey", o4.SecurityKey = "security_key", o4))(H || {});
function E(t2) {
  return `${f2.URL}/v1/apps/${t2}`;
}
var A = class {
  constructor(e2, r2) {
    this.tokenStore = r2;
    this.apiUrl = E(e2) + "/tokens/";
  }
  async authGuard() {
    try {
      let e2 = await this.tokenStore.getAuthToken(), r2 = jwt_decode_esm_default(e2, { header: true }), o4 = jwt_decode_esm_default(e2);
      return !!(o4 !== void 0 && r2 !== void 0 && this._validJWTPayload(o4) && this._validJWTHeader(r2));
    } catch {
      return false;
    }
  }
  async signOut() {
    let e2 = await this.tokenStore.getRefreshToken();
    return e2 ? fetch(`${this.apiUrl}?` + new URLSearchParams({ refresh_token: e2 }), { method: "DELETE" }).then(({ status: r2 }) => r2 === 200).finally(() => {
      b2(this.tokenStore) && this.tokenStore.clearTokens();
    }) : (b2(this.tokenStore) && this.tokenStore.clearTokens(), true);
  }
  async getAuthToken() {
    let e2 = await this._getMutex("getAuthToken").acquire(), r2 = await this.tokenStore.getAuthToken();
    if (await this.tokenStore.getRefreshToken() === void 0) {
      if (!r2) throw e2(), new u("Login required", { status: g.PSGLoginRequired, statusText: "Login required" });
      return e2(), r2;
    }
    if (r2) {
      let s = jwt_decode_esm_default(r2);
      if (s !== void 0 && this._validJWTPayload(s)) return e2(), Promise.resolve(r2);
    }
    return this.refresh().then((s) => s.auth_token).finally(() => {
      e2();
    });
  }
  async refresh() {
    let e2 = await this._getMutex("refresh").acquire(), r2 = new u("Login required", { status: g.PSGLoginRequired, statusText: "Login required" }), o4 = await this.tokenStore.getRefreshToken();
    return o4 ? fetch(this.apiUrl, { headers: n3(), method: "POST", body: JSON.stringify({ refresh_token: o4 }) }).then(i).then((s) => (b2(this.tokenStore) && this.tokenStore.setTokens(s.auth_result), s.auth_result)).catch(() => {
      throw r2;
    }).finally(() => {
      e2();
    }) : (e2(), Promise.reject(r2));
  }
  _validJWTPayload(e2) {
    let r2 = ["exp", "iss", "sub"], o4 = Math.floor(Date.now() / 1e3);
    return r2.forEach((s) => {
      if (!(s in e2)) return false;
    }), !(e2.exp && o4 > e2.exp);
  }
  _validJWTHeader(e2) {
    let r2 = { alg: "RS256", typ: "JWT" };
    return !(e2.alg !== r2.alg || e2.typ !== r2.typ);
  }
  _getMutex(e2) {
    let r2 = globalThis;
    return (r2.__PASSAGE__ === void 0 || r2.__PASSAGE__.mutexes === void 0) && (r2.__PASSAGE__ = { mutexes: {} }), r2.__PASSAGE__.mutexes[e2] === void 0 && (r2.__PASSAGE__.mutexes[e2] = new Mutex()), r2.__PASSAGE__.mutexes[e2];
  }
};
var D = new y2();
var I = class {
  constructor(e2, r2) {
    this.tokenStore = r2;
    this.apiUrl = E(e2) + "/currentuser", this.session = new A(e2, this.tokenStore);
  }
  async userInfo() {
    let e2 = await this._getToken(), r2 = await fetch(this.apiUrl, { method: "GET", headers: n3({ Authorization: `Bearer ${e2}` }) }).then(async (o4) => o4.status !== 200 ? void 0 : await o4.json()).catch((o4) => {
      throw new u("Failed to fetch current user.", { status: g.NotFound, statusText: "Not Found" });
    });
    return r2 == null ? void 0 : r2.user;
  }
  async changeEmail(e2, r2) {
    let o4 = await this._getToken();
    return (await fetch(`${this.apiUrl}/email`, { method: "PATCH", headers: n3({ Authorization: `Bearer ${o4}`, "Content-Type": "application/json" }), body: JSON.stringify({ new_email: e2, language: r2 }) }).then(i)).magic_link;
  }
  async changePhone(e2, r2) {
    let o4 = await this._getToken();
    return (await fetch(`${this.apiUrl}/phone`, { method: "PATCH", headers: n3({ Authorization: `Bearer ${o4}`, "Content-Type": "application/json" }), body: JSON.stringify({ new_phone: e2, language: r2 }) }).then(i)).magic_link;
  }
  async editDevice(e2, r2) {
    if (e2 === "" || e2 === void 0) throw new u("A deviceID is required for an edit device request.", { status: g.BadRequest, statusText: "Bad Request" });
    if (Object.keys(r2).length === 0) throw new u("Edit device request must not have an empty request body.", { status: g.BadRequest, statusText: "Bad Request" });
    let o4 = await this._getToken();
    return (await fetch(`${this.apiUrl}/devices/${e2}`, { method: "PATCH", headers: n3({ Authorization: `Bearer ${o4}`, "Content-Type": "application/json" }), body: JSON.stringify({ ...r2 }) }).then(i)).device;
  }
  async listDevices() {
    let e2 = await this._getToken();
    return (await fetch(`${this.apiUrl}/devices/`, { method: "GET", headers: n3({ Authorization: `Bearer ${e2}`, "Content-Type": "application/json" }) }).then(i)).devices;
  }
  async addDevice(e2) {
    var _;
    let r2 = await this._getToken(), o4 = await fetch(this.apiUrl + "/devices/start", { headers: n3({ Authorization: `Bearer ${r2}` }), body: JSON.stringify({ authenticator_attachment: (_ = e2 == null ? void 0 : e2.authenticatorAttachment) != null ? _ : T.Platform }), method: "POST" }).then(i), s = await navigator.credentials.create({ publicKey: this._parsePublicKey(o4.handshake.challenge.publicKey) }).catch((m2) => {
      throw new u("failed to parse public key", { status: g.PSGParsePublicKeyForNewDeviceFailed, statusText: "PSG Parse Public Key For New Device Failed" });
    }).then((m2) => m2), h = [];
    (s == null ? void 0 : s.response.getTransports) && typeof (s == null ? void 0 : s.response.getTransports) == "function" && (h = s == null ? void 0 : s.response.getTransports());
    let a = o4.user.id, P2 = await fetch(this.apiUrl + "/devices/finish", { headers: n3({ Authorization: `Bearer ${r2}` }), method: "POST", body: JSON.stringify({ user_id: a, handshake_id: o4.handshake.id, handshake_response: { rawId: c.encodeBytes(s == null ? void 0 : s.rawId), id: s == null ? void 0 : s.id, type: s == null ? void 0 : s.type, response: { attestationObject: c.encodeBytes(s == null ? void 0 : s.response.attestationObject), clientDataJSON: c.encodeBytes(s == null ? void 0 : s.response.clientDataJSON) }, transports: h } }) }).then(i);
    return D.setPsgCredID(a, s), P2.device;
  }
  async deleteDevice(e2) {
    let r2 = typeof e2 == "string" ? e2 : e2.id, o4 = typeof e2 == "string" ? void 0 : e2.cred_id;
    if (!r2) throw new u("A deviceID is required to delete a device.", { status: g.NotFound, statusText: "Not Found" });
    let s = false, h = await this._getToken();
    return s = await fetch(`${this.apiUrl}/devices/${r2}`, { method: "DELETE", headers: n3({ Authorization: `Bearer ${h}`, "Content-Type": "application/json" }) }).then(async (a) => a.ok ? true : await a.text().then((P2) => {
      throw new u(P2, a);
    })), s && o4 !== void 0 && D.removeCredential(o4), s;
  }
  async listSocialConnections() {
    let e2 = await this._getToken();
    return (await fetch(`${this.apiUrl}/social-connections/`, { method: "GET", headers: n3({ Authorization: `Bearer ${e2}`, "Content-Type": "application/json" }) }).then(i)).social_connections;
  }
  async deleteSocialConnection(e2) {
    let r2 = false, o4 = await this._getToken();
    return r2 = await fetch(`${this.apiUrl}/social-connections/${e2}`, { method: "DELETE", headers: n3({ Authorization: `Bearer ${o4}`, "Content-Type": "application/json" }) }).then(async (s) => s.ok ? true : await s.text().then((h) => {
      throw new u(h, s);
    })), r2;
  }
  async getMetadata() {
    let e2 = await this._getToken();
    return (await fetch(`${this.apiUrl}/user-metadata`, { method: "GET", headers: n3({ Authorization: `Bearer ${e2}` }) }).then(i)).user_metadata;
  }
  async updateMetadata(e2) {
    let r2 = await this._getToken();
    return (await fetch(`${this.apiUrl}/user-metadata`, { method: "PATCH", headers: n3({ Authorization: `Bearer ${r2}`, "Content-Type": "application/json" }), body: JSON.stringify({ user_metadata: e2 }) }).then(i)).user;
  }
  _parsePublicKey(e2) {
    return e2.challenge = c.decodeBytes(e2.challenge.toString()), e2.user.id = c.decodeBytes(e2.user.id.toString()), e2;
  }
  async _getToken() {
    return await this.session.getAuthToken();
  }
};
var U = class {
  async getBrowserInfo() {
    let e2 = await y.getCredentialAvailable();
    return { createPassKeySupported: e2.syncedCredential, getPassKeySupported: e2.syncedCredential, conditionalUISupported: e2.conditionalUI };
  }
};
var x = class {
  constructor(e2, r2) {
    this.tokenStore = r2;
    this.apiUrl = e2 + "/social";
  }
  async authorizeWith(e2) {
    if (!window.isSecureContext) throw new u("Passage Social Login requires a secure context (HTTPS or localhost)", { status: g.PSGSecureContextRequired, statusText: "Secure context required" });
    sessionStorage.setItem("oauth2Connection", e2);
    let r2 = await this._getQueryParams(e2);
    window.location.href = `${this.apiUrl}/authorize?${r2}`;
  }
  async exchangeToken(e2) {
    let r2 = sessionStorage.getItem("oauth2Verifier");
    if (r2 === null || r2 === "" || r2 === " ") throw new u("Social login verifier not found", { status: g.PSGSocialSessionStorageError, statusText: "Social login verifier not found" });
    let o4 = `${this.apiUrl}/token?code=${e2}&verifier=${r2}`;
    return (await fetch(o4, { headers: n3(), method: "GET" }).then(i).then((h) => S(h, this.tokenStore))).auth_result;
  }
  async _getQueryParams(e2) {
    let r2 = window.location.href, o4 = this._getRandomString(32);
    sessionStorage.setItem("oauth2State", o4);
    let s = await this._getCodeChallenge(), a = { redirect_uri: r2, state: o4, code_challenge: s, code_challenge_method: "S256", connection_type: e2 };
    return new URLSearchParams(a).toString();
  }
  async _getCodeChallenge() {
    let e2 = this._getRandomString(32);
    return sessionStorage.setItem("oauth2Verifier", e2), await this._sha256Hash(e2);
  }
  _getRandomString(e2) {
    return window.crypto.getRandomValues(new Uint8Array(e2)).toString().replace(/,/g, "");
  }
  async _sha256Hash(e2) {
    let o4 = new TextEncoder().encode(e2), s = await window.crypto.subtle.digest("SHA-256", o4);
    return c.encodeBytes(s);
  }
};
var F = class {
  constructor(e2, r2) {
    this.appID = e2;
    this.fullUrl = E(this.appID), (r2 == null ? void 0 : r2.tokenStore) === void 0 ? this.tokenStore = new N() : this.tokenStore = r2.tokenStore, this.extraHeaders = r2 == null ? void 0 : r2.extraHeaders, f2.EXTRA_HEADERS = this.extraHeaders;
  }
  credIDExists(e2) {
    let r2 = new y2().getPsgCredObj();
    return r2 ? !!JSON.parse(r2)[e2] : false;
  }
  async register(e2, r2) {
    return await new O(this.fullUrl, this.tokenStore, e2).withWebAuthn(r2);
  }
  async login(e2) {
    return await new C2(this.fullUrl, this.tokenStore, e2).withWebAuthn();
  }
  async loginConditional(e2) {
    return await new C2(this.fullUrl, this.tokenStore).withWebAuthn({ mediation: "conditional", signal: e2 });
  }
  async appInfo() {
    return await new v(this.fullUrl).appInfo();
  }
  async browserInfo() {
    return await new U().getBrowserInfo();
  }
  async getCredentialAvailable() {
    return await y.getCredentialAvailable();
  }
  async createCredentialAvailable() {
    return await d.createCredentialAvailable();
  }
  checkWebauthnConfig(e2) {
    let r2 = true;
    return e2.auth_origin.replace(/\/$/, "") != window.location.origin.replace(/\/$/, "") && (console.error('The auth_origin configured for webauthn in your app settings does not match the "origin" of your current URL.  Please reconfigure this in the admin console. (Your current "origin" is `' + window.location.origin + "`) Passage will continue to work with other authentication methods."), r2 = false), r2;
  }
  async isWebauthnSupported(e2) {
    let r2 = await d.createCredentialAvailable();
    return e2 ? r2.securityKey : r2.platform;
  }
  async identifierExists(e2) {
    let o4 = await new v(this.fullUrl).identifierExists(e2);
    return o4 && (o4.hasPasskey = o4.webauthn_types.includes("passkey"), o4);
  }
  async newRegisterMagicLink(e2, r2) {
    return await new w(this.fullUrl, this.tokenStore).newRegister(e2, r2);
  }
  async newLoginMagicLink(e2, r2) {
    return await new w(this.fullUrl, this.tokenStore).newLogin(e2, r2);
  }
  async magicLinkActivate(e2) {
    return await new w(this.fullUrl, this.tokenStore).activate(e2);
  }
  async getMagicLinkStatus(e2) {
    return await new w(this.fullUrl, this.tokenStore).getStatus(e2);
  }
  async newRegisterOneTimePasscode(e2, r2) {
    return await new R(this.fullUrl, this.tokenStore).newRegister(e2, r2);
  }
  async newLoginOneTimePasscode(e2, r2) {
    return await new R(this.fullUrl, this.tokenStore).newLogin(e2, r2);
  }
  async oneTimePasscodeActivate(e2, r2) {
    return await new R(this.fullUrl, this.tokenStore).activate(e2, r2);
  }
  getCurrentUser() {
    return new I(this.appID, this.tokenStore);
  }
  getCurrentSession() {
    return new A(this.appID, this.tokenStore);
  }
  async createUser(e2) {
    return (await fetch(`${this.fullUrl}/users`, { headers: n3(), body: JSON.stringify({ ...e2 }), method: "POST" }).then(i)).user;
  }
  async authorizeWith(e2) {
    await new x(this.fullUrl, this.tokenStore).authorizeWith(e2);
  }
  async finishSocialAuthentication(e2) {
    return await new x(this.fullUrl, this.tokenStore).exchangeToken(e2);
  }
};
var te = ((o4) => (o4.email = "email", o4.phone = "phone", o4.both = "both", o4))(te || {});
var re = ((s) => (s.Phone = "phone", s.Email = "email", s.Both = "both", s.Either = "either", s))(re || {});
var oe = ((a) => (a.STRING = "string", a.BOOLEAN = "boolean", a.INTEGER = "integer", a.DATE = "date", a.PHONE = "phone", a.EMAIL = "email", a))(oe || {});
var se = ((o4) => (o4.LoginCode = "otp", o4.MagicLink = "magic_link", o4.None = "none", o4))(se || {});
var ne = ((o4) => (o4.Google = "google", o4.Github = "github", o4.Apple = "apple", o4))(ne || {});
var ie = ((p2) => (p2.ANDALE_MONO = "Andalé Mono", p2.ARIAL = "Arial", p2.ARIAL_BLACK = "Arial Black", p2.BASKERVILLE = "Baskerville", p2.BRADLEY_HAND = "Bradley Hand", p2.BRUSH_SCRIPT_MT = "Brush Script MT", p2.COMIC_SANS_MS = "Comic Sans MS", p2.COURIER = "Courier", p2.GEORGIA = "Georgia", p2.GILL_SANS = "Gill Sans", p2.HELVETICA = "Helvetica", p2.IMPACT = "Impact", p2.LUCIDA = "Lucida", p2.LUMINARI = "Luminari", p2.MONACO = "Monaco", p2.PALATINO = "Palatino", p2.TAHOMA = "Tahoma", p2.TIMES_NEW_ROMAN = "Times New Roman", p2.TREBUCHET_MS = "Trebuchet MS", p2.VERDANA = "Verdana", p2))(ie || {});
var ae = ((s) => (s.Seconds = "s", s.Minutes = "m", s.Hours = "h", s.Days = "d", s))(ae || {});

// node_modules/@passageidentity/passage-elements/dist/package/PassageUser/index.mjs
var p = (r2, e2, s) => {
  if (!e2.has(r2)) throw TypeError("Cannot " + s);
};
var i2 = (r2, e2, s) => (p(r2, e2, "read from private field"), s ? s.call(r2) : e2.get(r2));
var u2 = (r2, e2, s) => {
  if (e2.has(r2)) throw TypeError("Cannot add the same private member more than once");
  e2 instanceof WeakSet ? e2.add(r2) : e2.set(r2, s);
};
var d2 = (r2, e2, s, t2) => (p(r2, e2, "write to private field"), t2 ? t2.call(r2, s) : e2.set(r2, s), s);
var g2 = class extends B {
  constructor(s) {
    super();
    this.externalToken = s;
  }
  getAuthToken() {
    return Promise.resolve(this.externalToken);
  }
};
var o3;
var n4;
var c2 = class {
  constructor(e2) {
    u2(this, o3, void 0);
    u2(this, n4, void 0);
    let s, t2;
    e2 !== void 0 ? (s = e2, t2 = new g2(s)) : s = localStorage.getItem("psg_auth_token");
    let a = this._getAppId(s), l2 = new F(a, { tokenStore: t2 });
    d2(this, o3, l2.getCurrentUser()), d2(this, n4, l2.getCurrentSession());
  }
  _getAppId(e2) {
    let s = new u("No Passsage authToken found", { status: g.PSGLoginRequired, statusText: "Login required" });
    if (e2 === null) throw s;
    let t2 = jwt_decode_esm_default(e2);
    if (t2 !== void 0 && t2.aud !== void 0 && Array.isArray(t2.aud) && t2.aud[1] !== void 0) return t2.aud[1];
    if (t2 !== void 0 && t2.iss !== void 0) {
      let a = t2.iss.split("/");
      return a[a.length - 1];
    }
    throw s;
  }
  authGuard() {
    return i2(this, n4).authGuard();
  }
  async userInfo() {
    return i2(this, o3).userInfo();
  }
  async signOut() {
    return i2(this, n4).signOut();
  }
  async getAuthToken() {
    return i2(this, n4).getAuthToken();
  }
  async refresh() {
    return (await i2(this, n4).refresh()).auth_token;
  }
};
o3 = /* @__PURE__ */ new WeakMap(), n4 = /* @__PURE__ */ new WeakMap();
export {
  c2 as PassageUser
};
/*! Bundled license information:

js-cookie/dist/js.cookie.mjs:
  (*! js-cookie v3.0.5 | MIT *)
*/
//# sourceMappingURL=@passageidentity_passage-elements_passage-user.js.map
